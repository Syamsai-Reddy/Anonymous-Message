"use strict";(()=>{var e={};e.id=707,e.ids=[707],e.modules={11185:e=>{e.exports=require("mongoose")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},39491:e=>{e.exports=require("assert")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},63477:e=>{e.exports=require("querystring")},57310:e=>{e.exports=require("url")},73837:e=>{e.exports=require("util")},59796:e=>{e.exports=require("zlib")},24309:(e,s,t)=>{t.r(s),t.d(s,{originalPathname:()=>q,patchFetch:()=>x,requestAsyncStorage:()=>m,routeModule:()=>g,serverHooks:()=>f,staticGenerationAsyncStorage:()=>y});var r={};t.r(r),t.d(r,{GET:()=>l,POST:()=>d});var a=t(49303),i=t(88716),n=t(60670),o=t(45609),c=t(27209),u=t(79297),p=t(60109);async function d(e){await (0,u.Z)();let s=await (0,o.Z1)(c.L),t=s?.user;if(!s||!s.user)return Response.json({success:!1,message:"Not authenticated"},{status:401});let r=t._id,{acceptMessages:a}=await e.json();try{let e=await p.Z.findByIdAndUpdate(r,{isAcceptingMessages:a},{new:!0});if(!e)return Response.json({success:!1,message:"Unable to find user to update message acceptance status"},{status:404});return Response.json({success:!0,message:"Message acceptance status updated successfully",updatedUser:e},{status:200})}catch(e){return console.error("Error updating message acceptance status:",e),Response.json({success:!1,message:"Error updating message acceptance status"},{status:500})}}async function l(e){await (0,u.Z)();let s=await (0,o.Z1)(c.L),t=s?.user;if(!s||!t)return Response.json({success:!1,message:"Not authenticated"},{status:401});try{let e=await p.Z.findById(t._id);if(!e)return Response.json({success:!1,message:"User not found"},{status:404});return Response.json({success:!0,isAcceptingMessages:e.isAcceptingMessages},{status:200})}catch(e){return console.error("Error retrieving message acceptance status:",e),Response.json({success:!1,message:"Error retrieving message acceptance status"},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/accept-messages/route",pathname:"/api/accept-messages",filename:"route",bundlePath:"app/api/accept-messages/route"},resolvedPagePath:"C:\\Users\\Dell\\Desktop\\anonymous-message\\src\\app\\api\\accept-messages\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:y,serverHooks:f}=g,q="/api/accept-messages/route";function x(){return(0,n.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:y})}},27209:(e,s,t)=>{t.d(s,{L:()=>c});var r=t(53797),a=t(42023),i=t.n(a),n=t(79297),o=t(60109);let c={providers:[(0,r.Z)({id:"credentials",name:"Credentials",credentials:{email:{label:"Email",type:"text"},password:{label:"Password",type:"password"}},async authorize(e){await (0,n.Z)();try{let s=await o.Z.findOne({$or:[{email:e.identifier},{username:e.identifier}]});if(!s)throw Error("No user found with this email");if(!s.isVerified)throw Error("Please verify your account before logging in");if(await i().compare(e.password,s.password))return s;throw Error("Incorrect password")}catch(e){throw Error(e)}}})],callbacks:{jwt:async({token:e,user:s})=>(s&&(e._id=s._id?.toString(),e.isVerified=s.isVerified,e.isAcceptingMessages=s.isAcceptingMessages,e.username=s.username),e),session:async({session:e,token:s})=>(s&&(e.user._id=s._id,e.user.isVerified=s.isVerified,e.user.isAcceptingMessages=s.isAcceptingMessages,e.user.username=s.username),e)},pages:{signIn:"/signin"},session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET}},79297:(e,s,t)=>{t.d(s,{Z:()=>n});var r=t(11185),a=t.n(r);let i={},n=async function(){if(i.isConnected){console.log("Alredy connected to the database");return}try{let e=await a().connect(process.env.MONGODB_URI||"",{});i.isConnected=e.connections[0].readyState,console.log("Database connected successfully")}catch(e){console.error("Database connection failed:",e),process.exit(1)}}},60109:(e,s,t)=>{t.d(s,{Z:()=>o});var r=t(11185),a=t.n(r);let i=new(a()).Schema({content:{type:String,required:!0},createdAt:{type:Date,required:!0,default:Date.now}}),n=new(a()).Schema({username:{type:String,required:[!0,"Username is required"],trim:!0,unique:!0},email:{type:String,required:[!0,"Email is required"],unique:!0,match:[/.+\@.+\..+/,"Please use a valid email address"]},password:{type:String,required:[!0,"Password is required"]},verifyCode:{type:String,required:[!0,"Verify Code is required"]},verifyCodeExpiry:{type:Date,required:[!0,"Verify Code Expiry is required"]},isVerified:{type:Boolean,default:!1},isAcceptingMessages:{type:Boolean,default:!0},messages:[i]}),o=a().models.User||a().model("User",n)}};var s=require("../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[948,463,857],()=>t(24309));module.exports=r})();